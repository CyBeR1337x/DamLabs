--a
CREATE TRIGGER DISABLE_DELETION_ACCOUNT ON ACCOUNTS INSTEAD OF DELETE
AS
BEGIN
	PRINT 'NOT ALLOWED TO DELETE'
END

CREATE TRIGGER DISABLE_DELETION_ACCOUNT_BK ON ACCOUNTS_BACKUP INSTEAD OF DELETE
AS
BEGIN
	PRINT 'NOT ALLOWED TO DELETE'
END

DROP TRIGGER HANDLE_ACCOUNT
CREATE TRIGGER HANDLE_ACCOUNTT ON ACCOUNTS INSTEAD OF INSERT
AS
BEGIN
	DECLARE @EID INT = (SELECT TOP 1 eid FROM inserted)
	DECLARE @YEAR INT = (SELECT TOP 1 year FROM inserted)

	DECLARE @BONUS DECIMAL = (SELECT SUM(pp.pBonusAmout) 
							FROM inserted a 
							INNER JOIN Project_Allocation p ON a.eid = p.eid
							INNER JOIN PROJECT pp ON p.pid = pp.pid)

	INSERT INTO ACCOUNTS_BACKUP SELECT * FROM inserted
	INSERT INTO ACCOUNTS SELECT * FROM inserted
	UPDATE ACCOUNTS SET Project_Bonus = @BONUS WHERE eid = @EID AND YEAR = @YEAR
	UPDATE ACCOUNTS_BACKUP SET Project_Bonus = @BONUS WHERE eid = @EID AND YEAR = @YEAR

END

CREATE TRIGGER HANDLE_ACCOUNT_UPDATE ON ACCOUNTS AFTER UPDATE
AS
BEGIN
	DECLARE @EID INT = (SELECT TOP 1 eid FROM inserted)
	DELETE FROM ACCOUNTS_BACKUP WHERE eid = @EID
	INSERT INTO ACCOUNTS_BACKUP SELECT * FROM inserted
END
select * from ACCOUNTS

--b:

CREATE TRIGGER CONSTRAINTS_EMPLOYEE ON Employee INSTEAD OF INSERT
AS
BEGIN
	IF (SELECT COUNT(*) FROM inserted i INNER JOIN EMPLOYEE e ON i.eid = e.eid) > 0
		PRINT 'Primary key violated!'
	else 
		INSERT INTO EMPLOYEE SELECT * from inserted
END

CREATE TRIGGER CONSTRAINTS_ACCOUNT ON ACCOUNTS INSTEAD OF INSERT
AS
BEGIN
	IF (SELECT COUNT(*) FROM inserted i INNER JOIN ACCOUNTS e ON i.eid != e.eid) > 0
		PRINT 'Foregin Key Constraint violated!!'
	else 
		INSERT INTO ACCOUNTS SELECT * from inserted
END

--INSERT INTO ACCOUNTS VALUES(3, 2024, 12, 5000, 5000)

CREATE TRIGGER CONSTRAINTS_PROJECT ON PROJECT INSTEAD OF INSERT
AS
BEGIN
	IF (SELECT COUNT(*) FROM inserted i INNER JOIN PROJECT e ON i.pid = e.pid) > 0
		PRINT 'Primary key violated!'
	else 
		INSERT INTO PROJECT SELECT * from inserted
END

CREATE TRIGGER CONSTRAINTS_PROJECT_ALLOC ON Project_Allocation INSTEAD OF INSERT
AS
BEGIN
	IF (SELECT COUNT(*) FROM inserted i INNER JOIN EMPLOYEE e ON i.eid = e.eid) = 0
		PRINT 'Foregin Key Constraint violated: Employee NOT FOUND!'
	ELSE IF (SELECT COUNT(*) FROM inserted i INNER JOIN PROJECT e ON i.pid = e.pid) = 0
			PRINT 'Foregin Key Constraint violated: Project NOT FOUND!'
	else 
		INSERT INTO Project_Allocation SELECT * from inserted
END

INSERT INTO Project_Allocation VALUES(1, 101)


--c
CREATE TRIGGER LOG_EMPLOYEE ON EMPLOYEE AFTER INSERT, UPDATE, DELETE
AS 
BEGIN
	DECLARE @ACTION VARCHAR(20)
	DECLARE @C INT
	IF EXISTS (SELECT * FROM inserted) AND EXISTS(SELECT * FROM deleted)
	BEGIN
		SELECT @C = COUNT(*) FROM inserted
		SET @ACTION = 'UPDATE'
	END
	ELSE IF EXISTS (SELECT * FROM inserted)
	BEGIN
		SELECT @C = COUNT(*) FROM inserted
		SET @ACTION = 'INSERT'
	END
	ELSE IF EXISTS (SELECT * FROM deleted)
	BEGIN
		SELECT @C = COUNT(*) FROM deleted
		SET @ACTION = 'DELETE'
	END

	INSERT INTO LOG VALUES('EMPLOYEE', GETDATE(), GETDATE(), @ACTION, @C)
END


CREATE TRIGGER LOG_PROJECT ON PROJECT AFTER INSERT, UPDATE, DELETE
AS 
BEGIN
	DECLARE @ACTION VARCHAR(20)
	DECLARE @C INT
	IF EXISTS (SELECT * FROM inserted) AND EXISTS(SELECT * FROM deleted)
	BEGIN
		SELECT @C = COUNT(*) FROM inserted
		SET @ACTION = 'UPDATE'
	END
	ELSE IF EXISTS (SELECT * FROM inserted)
	BEGIN
		SELECT @C = COUNT(*) FROM inserted
		SET @ACTION = 'INSERT'
	END
	ELSE IF EXISTS (SELECT * FROM deleted)
	BEGIN
		SELECT @C = COUNT(*) FROM deleted
		SET @ACTION = 'DELETE'
	END
	IF @ACTION != ''
		INSERT INTO LOG VALUES('PROJECT', GETDATE(), GETDATE(), @ACTION, @C)
END

CREATE TRIGGER LOG_ACCOUNTS ON ACCOUNTS AFTER INSERT, UPDATE, DELETE
AS 
BEGIN
	DECLARE @ACTION VARCHAR(20) = ''
	DECLARE @C INT
	IF EXISTS (SELECT * FROM inserted) AND EXISTS(SELECT * FROM deleted)
	BEGIN
		SELECT @C = COUNT(*) FROM inserted
		SET @ACTION = 'UPDATE'
	END
	ELSE IF EXISTS (SELECT * FROM inserted)
	BEGIN
		SELECT @C = COUNT(*) FROM inserted
		SET @ACTION = 'INSERT'
	END
	ELSE IF EXISTS (SELECT * FROM deleted)
	BEGIN
		SELECT @C = COUNT(*) FROM deleted
		SET @ACTION = 'DELETE'
	END


	INSERT INTO LOG VALUES('ACCOUNTS', GETDATE(), GETDATE(), @ACTION, @C)
END
SELECT * FROM LOG


